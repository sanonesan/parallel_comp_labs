#pragma once

#include <cmath>
#include <cstddef>
#include <iterator>
#include <vector>

template <typename T>
void lu_seq_decomp(std::vector<T>& matrix, std::size_t n) {
	for (std::size_t i = 0; i < n - 1; ++i) {
		for (std::size_t j = i + 1; j < n; ++j) {
			matrix[j + n * i] = matrix[j + n * i] / matrix[i + n * i];
		}
		for (std::size_t j = i + 1; j < n; ++j) {
			for (std::size_t k = i + 1; k < n; ++k) {
				matrix[j + n * k] =
					matrix[j + n * k] - matrix[j + n * i] * matrix[i + n * k];
			}
		}
	}
	return;
}

template <typename T>
void lu_seq_decomp(std::vector<T>& matrix, std::size_t n) {
	for (std::size_t i = 0; i < n - 1; ++i) {
		for (std::size_t j = i + 1; j < n; ++j) {
			matrix[j * n + i] = matrix[j * n + i] / matrix[i * n + i];
		}
		for (std::size_t j = i + 1; j < n; ++j) {
			for (std::size_t k = i + 1; k < n; ++k) {
				matrix[j * n + k] =
					matrix[j * n + k] - matrix[j * n + i] * matrix[i * n + k];
			}
		}
	}
	return;
}



for (std::size_t j = i + 1; j < i + step; ++j) {
			for (std::size_t l = 0; l < step - j; ++l) {
				for (std::size_t k = i + step; k < n; ++k) {
					// printf("B[%d, %d] = %f \t", j + l, k,
					// 	   matrix[(j + l) * n + k]);
					// printf("B[%d, %d] = %f \t ", j + l, j - 1,
					// 	   matrix[(j + l) * n + j - 1]);
					// printf("B[%d, %d] = %f \n", j - 1, k,
					// 	   matrix[(j - 1) * n + k]);
					matrix[(j + l) * n + k] -=
						matrix[(j + l) * n + j - 1] * matrix[(j - 1) * n + k];
				}
			}
		}

